{% extends "base" %}
{% import "posts" as posts %}

{% block head %}
{{ posts::draw_embed(title="Upload", description="Upload your mod to DIVA Mod Archive", author=game_name ~ " Mod Archive") }}
{% endblock head %}

{% block content %}
<script>
	{% if update_id %}
	function upload_metadata() {
		var form = document.getElementById("form");
		var name = form['title'].value;
		var text = form['text'].value;
		var text_short = form['text_short'].value;
		var game_tag = form['game_tag'].value;
		var type_tag = form['type_tag'].value;
		var change = form['change-text'].value;
		if (title == "" || text == "" || text_short == "") {
			alert("Upload failed\nMissing text fields");
			return
		}
		document.getElementById('upload_btn_div').classList.add("disabled");
		document.getElementById('upload_metadata_btn_div').classList.add("disabled");

		let post_data = {
			'name': name,
			'text': text,
			'text_short': text_short,
			'game_tag': Number(game_tag),
			'type_tag': Number(type_tag),
		}
		if (change != '') {
			post_data.change = change;
		}

		options = {
			method: 'POST',
			headers: {
				'Content-Type': 'text/plain',
				'Authorization': 'Bearer {{ jwt }}'
			},
			body: JSON.stringify(post_data)
		}

		fetch_retry('/api/v1/posts/edit?update_id=' + {{ update_id }}, options, 3)
			.then(response => response.json())
		.then(data => {
			window.location.href = "/posts/" + data['id']
		})
		.catch(error => alert("Unknown error when uploading"))
	}
	{% endif %}

	const fetch_retry = (url, options, n) => fetch(url, options).then(response => {
		if (response.status != 200) {
			if (n == 0) return Promise.reject(response);
			else return fetch_retry(url, options, n - 1);
		}
		return Promise.resolve(response);
	}).catch(error => {
		if (n == 0) throw error;
		return fetch_retry(url, options, n - 1);
	})

	function crash_and_burn(error, message) {
		alert(message + "\n" + error);
		document.getElementById('upload_btn_div').classList.remove("disabled");
		{% if update_id %}
		document.getElementById('upload_metadata_btn_div').classList.remove("disabled");
		{% endif %}
		throw error;
	}

	function upload() {
		var form = document.getElementById("form");

		var image = form['imagePicker'];
		var archive = form['filePicker'];
		if (image.files.length != 1 || archive.files.length != 1) {
			alert("Upload failed\nMissing image/archive");
			return;
		}

		var name = form['title'].value;
		var text = form['text'].value;
		var text_short = form['text_short'].value;
		var game_tag = form['game_tag'].value;
		var type_tag = form['type_tag'].value;
		{% if update_id %}
		var change = form['change-text'].value;
		{% endif %}
		if (title == "" || text == "" || text_short == "") {
			alert("Upload failed\nMissing text fields");
			return
		}
		alert("Your mod is being uploaded, please wait as this can take a large amount of time");
		document.getElementById('upload_btn_div').classList.add("disabled")
		{% if update_id %}
		document.getElementById('upload_metadata_btn_div').classList.add("disabled")
		{% endif %}

		var options = {
			method: 'GET',
			headers: {
				'Content-Type': 'text/plain',
				'Authorization': 'Bearer {{ jwt }}'
			},
		}
		fetch_retry('/api/v1/posts/upload_image', options, 3)
			.then(response => response.json())
			.then(image_upload_url => async function (image_upload_url) {
				if (image_upload_url == null) {
					alert("Image upload failed");
					return;
				}
				var image_form = new FormData();
				image_form.append('file', image.files[0]);
				options = {
					method: 'POST',
					headers: {
						'Accept': '*/*',
					},
					body: image_form
				}
				fetch_retry(image_upload_url, options, 3)
					.then(response => response.json())
					.then(result => async function (result) {
						var image_url = result.result.variants[0]
						if (image_url == null) {
							alert("Image upload failed\nMaximum size for images is 10MiB");
							return
						}
						var image_url = image_url.replace("https://imagedelivery.net/", "{{ base_url | safe }}/cdn-cgi/imagedelivery/")

						var images_extra = form['imagesExtra'];
						var images_extra_urls = [];
						for (let i = 0; i < images_extra.files.length; i++) {
							options = {
								method: 'GET',
								headers: {
									'Content-Type': 'text/plain',
									'Authorization': 'Bearer {{ jwt }}'
								}
							}
							var response = await fetch_retry('/api/v1/posts/upload_image', options, 3);
							var extra_image_upload_url = await response.json();
							if (extra_image_upload_url == null) {
								alert("Image upload failed\nMaximum size for images is 10MiB");
								return
							}
							var extra_image_form = new FormData();
							extra_image_form.append('file', images_extra.files[i]);
							options = {
								method: 'POST',
								headers: {
									'Accept': '*/*',
								},
								body: extra_image_form
							}
							var response = await fetch_retry(extra_image_upload_url, options, 3);
							var result = await response.json();
							if (result == null) {
								alert("Image upload failed\nMaximum size for images is 10MiB");
								return
							}
							var extra_image_url = result.result.variants[0]
							var extra_image_url = extra_image_url.replace("https://imagedelivery.net/", "{{ base_url | safe }}/cdn-cgi/imagedelivery/")
							images_extra_urls.push(extra_image_url);
						}

						var file = archive.files[0];
						options = {
							method: 'GET',
							headers: {
								'Content-Type': 'text/plain',
								'Authorization': 'Bearer {{ jwt }}'
							}
						}
						fetch_retry('/api/v1/posts/upload_archive?name=' + file.name, options, 3)
							.then(response => response.json())
							.then(upload_url => {
								options = {
									method: 'PUT',
									headers: {
										'Content-Type': 'text/plain',
									},
									body: file
								},
								fetch_retry(upload_url, options, 3)
									.then(response => {
										let archive_url = '{{ base_url | safe }}/storage/{{ user.id }}/' + file.name;
										let post_data = {
											'name': name,
											'text': text,
											'text_short': text_short,
											'image': image_url,
											'images_extra': images_extra_urls,
											'link': archive_url,
											'game_tag': Number(game_tag),
											'type_tag': Number(type_tag),
										}
										{% if update_id %}
										if (change != '') {
											post_data.change = change;
										}
										{% endif %}

										options = {
											method: 'POST',
											headers: {
												'Content-Type': 'text/plain',
												'Authorization': 'Bearer {{ jwt }}'
											},
											body: JSON.stringify(post_data)
										}
										{% if update_id %}
										fetch_retry('/api/v1/posts/upload?update_id={{update_id}}', options, 5)
										{% else %}
										fetch_retry('/api/v1/posts/upload', options, 5)
										{% endif %}
											.then(response => response.json())
											.then(data => {
												window.location.href = "/posts/" + data['id']
											})
											.catch(error => crash_and_burn("Unknown error when uploading"))
									})
									.catch(error => crash_and_burn("Unknown error when uploading"))
							})
							.catch(error => crash_and_burn("Unknown error when uploading"))
					}(result))
					// Errors but just fucking continues?????
					.catch()
			}(image_upload_url))
			.catch(error => crash_and_burn("Failed to upload image"))
	}
</script>
<form id="form" class="row align-items-md-stretch gap-3" enctype="application/x-www-form-urlencoded">
	<div class="col-md-7 card card-body">
		{% if previous_title %}
		<h2 class="card-text text"><label for="title">Title: </label><input type="text" id="title" name="title"
				autocomplete="off" value="{{ previous_title }}"></h2>
		{% else %}
		<h2 class="card-text text"><label for="title">Title: </label><input type="text" id="title" name="title"
				autocomplete="off"></h2>
		{% endif %}
		<h5>
			<a href="/user/{{ user.id }}" class="card-subtitle text">{{ user.name | striptags }}</a>
		</h5>

		<label for="imagePicker" class="form-label mt-4">Image</label>
		<input class="form-control" accept="image/*" type="file" id="imagePicker">
		<label for="imagesExtra" class="form-label mt-4">Optional: Extra images</label>
		<input class="form-control" accept="image/*" type="file" id="imagesExtra" multiple>
	</div>
	<div class="col-md-3 card card-body gap-3">
		<div class="btn-group">
			<input type="radio" class="btn-check" name="btnradio" id="likedradiobtn" autocomplete="off">
			{% if likes %}
			<label class="btn btn-outline-primary disabled" for="likedradiobtn" id="likes">{{ likes }}👍</label>
			{% else %}
			<label class="btn btn-outline-primary disabled" for="likedradiobtn" id="likes">0👍</label>
			{% endif %}
			<input type="radio" class="btn-check" name="btnradio" id="dislikedradiobtn" autocomplete="off">
			{% if dislikes %}
			<label class="btn btn-outline-primary disabled" for="dislikedradiobtn" id="dislikes">{{ dislikes
				}}👎</label>
			{% else %}
			<label class="btn btn-outline-primary disabled" for="dislikedradiobtn" id="dislikes">0👎</label>
			{% endif %}
		</div>
		<div class="{{ posts::btn_success_outer() }}" id="upload_btn_div" onclick="upload()">
			<button type="button" id="upload_btn" style="box-shadow: none"
				class="{{ posts::btn_inner() }}">Upload</button>
		</div>
		{% if update_id %}
		<div class="{{ posts::btn_success_outer() }}" id="upload_metadata_btn_div" onclick="upload_metadata()">
			<button type="button" id="upload_metadata_btn" style="box-shadow: none"
				class="{{ posts::btn_inner() }}">Update metadata</button>
		</div>
		{% endif %}
		<label for="filePicker" class="form-label mt-4">Archive File</label>
		<input class="form-control" accept=".7z,.zip,.rar" type="file" id="filePicker">
	</div>
	<div class="card card-body">
		<h5 class="card-text">
			<label for="text">Long Description</label>
			{% if previous_description %}
			<textarea class="form-control" id="text" rows="5">{{ previous_description }}</textarea>
			{% else %}
			<textarea class="form-control" id="text" rows="5"></textarea>
			{% endif %}
			<label for="text_short">Short Description</label>
			{% if previous_description_short %}
			<input class="form-control" type="text" id="text_short" name="text_short" autocomplete="off"
				value="{{ previous_description_short }}">
			{% else %}
			<input class="form-control" type="text" id="text_short" name="text_short" autocomplete="off">
			{% endif %}

			<label for="game_tag">Game</label>
			{% if previous_game_tag %}
			<select class="form-control list-text" id="game_tag" name="game_tag">
				{% for game_tag in game_tags %}
				<option value="{{ game_tag.id }}" {% if game_tag.id==previous_game_tag %}selected{% endif %}>
					{{ game_tag.name }}</option>
				{% endfor %}
			</select>
			{% else %}
			<select class="form-control list-text" id="game_tag" name="game_tag">
				{% for game_tag in game_tags %}
				<option value="{{ game_tag.id }}">{{ game_tag.name }}</option>
				{% endfor %}
			</select>
			{% endif %}

			<label for="type_tag">Type</label>
			{% if previous_type_tag %}
			<select class="form-control list-text" id="type_tag" name="type_tag">
				{% for type_tag in type_tags %}
				<option value="{{ type_tag.id }}" {% if type_tag.id==previous_type_tag %}selected{% endif %}>
					{{ type_tag.name }}</option>
				{% endfor %}
			</select>
			{% else %}
			<select class="form-control list-text" id="type_tag" name="type_tag">
				{% for type_tag in type_tags %}
				<option value="{{ type_tag.id }}">{{ type_tag.name }}</option>
				{% endfor %}
			</select>
			{% endif %}
			{% if update_id %}
			<label for="change-text">Changes made</label>
			<textarea class="form-control" id="change-text" rows="5"></textarea>
			{% endif %}
		</h5>
	</div>
</form>
<style>
	.drop-target {
		border: 1px dashed #ccc;
	}
</style>
<script>
	function addDropHandler(element) {
		element.addEventListener('dragenter', function(e) {
			e.preventDefault();
			e.stopPropagation();
			element.classList.add('drop-target');
		});
		element.addEventListener('dragleave', function(e) {
			e.preventDefault();
			e.stopPropagation();
			element.classList.remove('drop-target');
		});
		element.addEventListener('drop', async(e) => {
			e.preventDefault();
			e.preventDefault();
			element.files = e.dataTransfer.files;
		});
	};

	const form = document.getElementById("form");
	const filePicker = form['filePicker'];
	const imagePicker = form['imagePicker'];
	const imagesExtra = form['imagesExtra'];
	addDropHandler(filePicker);
	addDropHandler(imagePicker);
	addDropHandler(imagesExtra);
</script>
{% endblock content %}
